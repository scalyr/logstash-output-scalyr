version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  unittest:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    steps:
      - checkout
      - run:
          name: Install bundler
          command: |
            gem update --system
            gem install bundler
      - run: # Install Ruby dependencies
          name: Bundle Install
          command: bundle install
      - run:
          name: Run rspec in parallel
          command: |
            # gem install rspec_junit_formatter
            bundle exec rspec
            #            --profile 10 \
            #            --format RspecJunitFormatter \
            #            --out test_results/rspec.xml \
            #            --format progress \
            # $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)
      # Save test results for timing analysis
      - store_test_results: # Upload test results for display in Test Summary: https://circleci.com/docs/2.0/collect-test-data/
          path: test_results
      # See https://circleci.com/docs/2.0/deployment-integrations/ for example deploy configs

  smoketest-git-dev:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Build gem
          command: |
            gem build logstash-output-scalyr.gemspec
            # We rename the file so we don't need to hard code version in Dockerfile
            mv logstash-output-scalyr-*.gem logstash-output-scalyr.gem
      - run:
          name: Run smoketest script which first builds another Docker Logstash image and installs our gem
          command: |
            gemfile=$(ls *.gem)
            echo "Using gemfile: ${gemfile}"
            cp $gemfile .circleci/docker/
            source .circleci/smoketest_logstash.sh yarnsh/agent-testing:latest 300 $gemfile .circleci/docker 8

  smoketest-git-dev-single-worker:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Build gem
          command: |
            gem build logstash-output-scalyr.gemspec
            # We rename the file so we don't need to hard code version in Dockerfile
            mv logstash-output-scalyr-*.gem logstash-output-scalyr.gem
      - run:
          name: Run smoketest script which first builds another Docker Logstash image and installs our gem
          command: |
            gemfile=$(ls *.gem)
            echo "Using gemfile: ${gemfile}"
            cp $gemfile .circleci/docker/
            source .circleci/smoketest_logstash.sh yarnsh/agent-testing:latest 300 $gemfile .circleci/docker 1

  # Job which runs basic smoke tests against latest stable version on RubyGems
  # to ensure something didn't get messed up during the publish process
  smoketest-rubygems-stable:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Download Gem from RubyGems
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
            LATEST_VERSION=$(curl https://rubygems.org/api/v1/versions/logstash-output-scalyr/latest.json | jq .version | tr -d '"')
            wget https://rubygems.org/downloads/logstash-output-scalyr-${LATEST_VERSION}.gem
            # We rename the file so we don't need to hard code version in Dockerfile
            mv logstash-output-scalyr-*.gem logstash-output-scalyr.gem
      - run:
          name: Run smoketest script which first builds another Docker Logstash image and installs our gem
          command: |
            gemfile=$(ls *.gem)
            echo "Using gemfile: ${gemfile}"
            cp $gemfile .circleci/docker/
            source .circleci/smoketest_logstash.sh yarnsh/agent-testing:latest 300 $gemfile .circleci/docker 8

  smoketest-rubygems-stable-single-worker:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Download Gem from RubyGems
          command: |
            sudo apt-get update
            sudo apt-get install -y jq
            LATEST_VERSION=$(curl https://rubygems.org/api/v1/versions/logstash-output-scalyr/latest.json | jq .version | tr -d '"')
            wget https://rubygems.org/downloads/logstash-output-scalyr-${LATEST_VERSION}.gem
            # We rename the file so we don't need to hard code version in Dockerfile
            mv logstash-output-scalyr-*.gem logstash-output-scalyr.gem
      - run:
          name: Run smoketest script which first builds another Docker Logstash image and installs our gem
          command: |
            gemfile=$(ls *.gem)
            echo "Using gemfile: ${gemfile}"
            cp $gemfile .circleci/docker/
            source .circleci/smoketest_logstash.sh yarnsh/agent-testing:latest 300 $gemfile .circleci/docker 1

  # NOTE: We need to use large resource class since for jRuby benchmark we pre-generate and store
  # large dataset in memory
  microbenchmarks-jruby:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    resource_class: large
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Run Micro Benchmarks
          no_output_timeout: 15m
          command: |
            git clone --depth 1 https://github.com/scalyr/codespeed-agent-fixtures.git

            sudo sudo apt-get install zstd
            export ZSTANDARD_LIBRARY=/usr/lib/x86_64-linux-gnu/libzstd.so.1

            gem install jrjackson
            gem install quantile
            gem install rbzip2
            gem install zstandard

            # echo "Flattening and serialization util results:"
            # echo ""
            # ruby spec/benchmarks/flattening_and_serialization.rb
            # echo ""
            # echo "Metrics recording results:"
            # ruby spec/benchmarks/metrics_overhead.rb
            # echo ""
            # echo "Bignum converting results:"
            # ruby spec/benchmarks/bignum_fixing.rb
            # echo ""
            # echo "json serialization:"
            # ruby spec/benchmarks/json_serialization.rb
            # echo ""
            # echo "set_session_level_serverhost_on_events results:"
            # ruby spec/benchmarks/set_session_level_serverhost_on_events.rb
            # echo ""
            echo "compression algorithms:"
            ruby spec/benchmarks/compression_algorithms.rb
            echo ""

  # We run micro benchmarks against cRuby just for reference purposes since plugins always run
  # with jRuby
  microbenchmarks-cruby:
    docker:
      - image: cimg/ruby:2.7.1-node
    resource_class: large
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Run Micro Benchmarks
          command: |
            gem install quantile
            echo "Flattening and serialization util results:"
            echo ""
            ruby spec/benchmarks/flattening_and_serialization.rb
            echo ""
            echo "Metrics recording results:"
            ruby spec/benchmarks/metrics_overhead.rb
            echo ""
            echo "Bignum converting results:"
            ruby spec/benchmarks/bignum_fixing.rb
            echo ""
            echo "set_session_level_serverhost_on_events results:"
            ruby spec/benchmarks/set_session_level_serverhost_on_events.rb
            echo ""

  confirm-no-vendoring:
    docker:
      - image: circleci/jruby:9.2.7.0-jdk
    steps:
      - setup_remote_docker:
          docker_layer_caching: false
      - checkout # special step to check out source code to working directory
      - run:
          name: Build gem
          command: |
            gem build logstash-output-scalyr.gemspec
            # We rename the file so we don't need to hard code version in Dockerfile
            mv logstash-output-scalyr-*.gem logstash-output-scalyr.gem
      - run:
          name: Unpack gem
          command: |
            gem unpack logstash-output-scalyr.gem
      - run:
          name: Confirm no vendor directory was unpacked
          command: |
            ls -la logstash-output-scalyr/
            [ ! -d logstash-output-scalyr/vendor ]

workflows:
  version: 2
  unittests-smoketests-benchmarks:
    jobs:
      - smoketest-git-dev
      - smoketest-rubygems-stable
      - smoketest-git-dev-single-worker
      - smoketest-rubygems-stable-single-worker
      - unittest
      - microbenchmarks-jruby
      - microbenchmarks-cruby
      - confirm-no-vendoring

  daily-stable-smoke-tests:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
       - smoketest-rubygems-stable
